Program([FuncDecl(Id(main),[],IntType,Block([VarDecl(Id(dividend),IntType),VarDecl(Id(divisor),IntType),VarDecl(Id(quotient),IntType),VarDecl(Id(remainder),IntType),CallExpr(Id(printf),[StringLiteral(Enter dividend: )]),CallExpr(Id(scanf),[Id(dividend)]),CallExpr(Id(printf),[StringLiteral(Enter divisor: )]),CallExpr(Id(scanf),[Id(divisor)]),BinaryOp(=,Id(quotient),BinaryOp(/,Id(dividend),Id(divisor))),BinaryOp(=,Id(remainder),BinaryOp(%,Id(dividend),Id(divisor))),CallExpr(Id(printf),[StringLiteral(Quotient = ),Id(quotient)]),CallExpr(Id(printf),[StringLiteral(Remainder = ),Id(remainder)]),Return(IntLiteral(0))]))])