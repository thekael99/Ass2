Program([FuncDecl(Id(getFibonacii),[VarDecl(Id(a),IntType),VarDecl(Id(b),IntType),VarDecl(Id(n),IntType)],VoidType,Block([VarDecl(Id(sum),IntType),If(BinaryOp(>,Id(n),IntLiteral(0)),Block([BinaryOp(=,Id(sum),BinaryOp(+,Id(a),Id(b))),CallExpr(Id(printf),[Id(sum)]),BinaryOp(=,Id(a),Id(b)),BinaryOp(=,Id(b),Id(sum)),CallExpr(Id(getFibonacii),[Id(a),Id(b),BinaryOp(-,Id(n),IntLiteral(1))])]))])),FuncDecl(Id(main),[],IntType,Block([VarDecl(Id(a),IntType),VarDecl(Id(b),IntType),VarDecl(Id(sum),IntType),VarDecl(Id(n),IntType),VarDecl(Id(i),IntType),BinaryOp(=,Id(a),IntLiteral(0)),BinaryOp(=,Id(b),IntLiteral(1)),CallExpr(Id(printf),[StringLiteral(Enter total number of terms: )]),CallExpr(Id(scanf),[Id(n)]),CallExpr(Id(printf),[StringLiteral(Fibonacii series is : )]),CallExpr(Id(printf),[Id(a),Id(b)]),CallExpr(Id(getFibonacii),[Id(a),Id(b),BinaryOp(-,Id(n),IntLiteral(2))]),Return(IntLiteral(0))]))])